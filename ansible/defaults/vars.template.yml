---

lab_domain_name: example.com

unraid:
  homelab_dir: /boot/homelab  # A place where all persistent stuff will be stored
  scripts_dir: /boot/homelab/_scripts
  boot_tmp_dir: /tmp/homelab_boot
  dotenv: /boot/homelab/.env
  services_data_dir: /mnt/cache/services  # If you'll use `/mnt/user/`, you might face issues with symlinks, for example: https://gitlab.com/gitlab-org/gitlab-development-kit/-/issues/20
  python_venv_dir: /mnt/cache/system/python
  tls_storage_dir: /mnt/cache/system/tls
  backups:
    rclone:
      remote:
        # SFTP 'rclone_remote' example - https://rclone.org/sftp/
        type: sftp
        host: example.com
        user: johndoe
        port: 22
        key_file: /etc/ssh/ssh_host_rsa_key
        use_insecure_cipher: false
      sync_targets:
        <unique_name>:
          local_path: /local/path/
          remote_path: remote/path/
    rsync:
      ssh_key: /etc/ssh/ssh_host_rsa_key
      ssh_target: johndoe@example.com
  webhooks:
    tls:
      pfsense_hostname:
      cert_descr:

zfs:
  chown: 99:100  # nobody
  mountpoint: /opt/zfs
  pool_name:
  encrypted_dataset_name:
  nfs_share:
    datasets: []
    options:
      - all_squash
      - anonuid=99  # nobody
      - anongid=100  # nobody
      - async
      - no_subtree_check
      - root_squash
  scrub_cron_expression:

docker_config:
  # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html
  container_defaults:
    labels:
      ManagedBy: Ansible
    restart_policy: unless-stopped
    # CPU
    cpus: 1.5 # Specify how much of the available CPU resources a container can use.
    # Memory management
    memory: 1G           # The maximum amount of memory the container can use
    kernel_memory: 2G    # https://docs.docker.com/config/containers/resource_constraints/#--kernel-memory-details
    memory_swap: 0       # The amount of memory this container is allowed to swap to disk
    memory_swappiness: 0 # https://docs.docker.com/config/containers/resource_constraints/#--memory-swappiness-details
    # Inspired by https://www.youtube.com/watch?v=S4fcR4s15OI
    healthcheck:
      test: [ "NONE" ]
  default_user: 99:100  # nobody
  container_timezone: UTC
  network:
    external:
      name: br3
      parent: br3
      ipam_config:
        subnet:   # Subnet
        iprange:  # must not overlap with DHCP pool
        gateway:  # Gateway
        aux_addresses:
          # https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/
          host:  # Reserved IP address of the unRAID
    iot:
      name: iot
      parent: br2
      ipam_config:
        subnet:   # Subnet
        iprange:  # must not overlap with DHCP pool
        gateway:  # Gateway
    internal:
      name: internal
      ipam_config:
        subnet:   # Subnet
        iprange:  # must not overlap with DHCP pool
        gateway:  # Gateway

idrac:
  host:
  username:
  password:

services:
  aria2:
    aria2_rpc_secret: 123qwerty
    ariang_http_auth: admin:admin
    static_ip:
    volumes: []
  authentik:
    # https://goauthentik.io/docs/installation/configuration
    authentik_secret_key:
    postgres_host: 'postgres.{{ docker_config.network.internal.name }}'
    postgres_port: 5432
    postgres_dbname:
    postgres_user:
    postgres_password:
    ldap:
      insecure: 'true'
      token:
  bookstack:
    mysql_host: 'mysql.{{ docker_config.network.internal.name }}:3306'
    mysql_dbname:
    mysql_user:
    mysql_password:
  diagrams:
    keystore_pass:
    key_pass:
  dlna:
    log_level:
    static_ip:
    media_volumes: []
  ebooks:
    library_volume:
  elasticsearch:
    ingest_host: 'elasticsearch.{{ lab_domain_name }}'
    static_ip:
  grafana:
    static_ip:
  influxdb:
    static_ip:
    ingest:
      https: true  # boolean
      port:
        http: 9091
        rpc: 9092
      url: 'https://<static_ip>:9091'   # wherever your InfluxDB instance is hosted
  jellyfin:
    static_ip:
    media_volumes: []
  #ldap:
  #  static_ip:
  loki:
    log_level: warn  # debug, info, warn, error
    ingest:
      port:
        grpc: 9095
        http: 9092
      url: 'http://<hostname_or_ip>:9092/loki/api/v1/push'  # wherever your Loki instance is hosted
  minio:
    static_ip:
  mysql:
    ingest_host: 'mysql.{{ lab_domain_name }}'
    static_ip:
  nextcloud:
    data_dir: /mnt/user/appdata/nextcloud/data
    postgres_host: 'postgres.{{ docker_config.network.internal.name }}'
    postgres_port: 5432
    postgres_dbname:
    postgres_user:
    postgres_password:
    postgres_dbtableprefix:
    redis_host: 'redis.{{ docker_config.network.internal.name }}'
    redis_port: 6379
  portainer:
    business_license_key: false  # optional
  postgresql:
    ingest_host: 'postgres.{{ lab_domain_name }}'
    static_ip:
  prometheus:
    blackbox:
      uptime_targets: []
    speedtest:
      server: CHANGEME
  promtail:
    log_level: warn  # debug, info, warn, error
    ingest:
      port:
        grpc: 9093
        http: 9094
  registry:
    http_secret:
  reverse_proxy:
    traefik_auth: 'user:password' # for basic auth - https://doc.traefik.io/traefik/v2.0/operations/api/#configuration
    static_ip:
  scrutiny:
    drives: []
      # - /dev/sda
    log_level: WARN  # https://github.com/sirupsen/logrus#level-logging=
    notify:
      # Testing notifications: curl -x POST http://hostname/api/health/notify
      level: warn  # 'warn' or 'error'
      urls: []  # https://containrrr.dev/shoutrrr/services/overview/
  servarr:
    library_volumes: []
    tdarr:
      nodes_count: 1
      nodes_cpuset_cpus:  # Example for machine with 40 cores
        0: [ 18, 19, 38, 39 ]
        1: [ 16, 17, 36, 37 ]
        2: [ 14, 15, 34, 35 ]
        3: [ 12, 13, 32, 33 ]
        4: [ 10, 11, 30, 31 ]
  syslog:
    address: 'udp://<hostname_or_ip>:514'
  telegraf:
    openweathermap:
      api_key: CHANGEME
      cities: []
  torrent:
    static_ip:
    volumes: []
  tubearchivist:
    elasticsearch:
      user: elastic
      password:
    storage:
      downloaded_videos: /mnt/user/change/me
    username: tubearchivist
    password: verysecret
  victoriametrics:
    log_level: WARN  # INFO, WARN, ERROR, FATAL, PANIC
    ingest:
      https: true  # boolean
      port:
        http:     8428
        graphite: 2003  # empty = disabled
        opentsdb: 4242  # empty = disabled
    prometheus:
      # Prometheus config file with 'scrape_configs'
      # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config
      config_file_path:
  wikijs:
    postgres_host: 'postgres.{{ docker_config.network.internal.name }}'
    postgres_port: 5432
    postgres_dbname:
    postgres_user:
    postgres_password:

# apps:
#   # docker_container_firefly
#   firefly:
#     # https://docs.firefly-iii.org/firefly-iii/installation/docker/
#     APP_KEY: CHANGEME_32_CHARS
#     DB_DATABASE: CHANGEME
#     DB_USERNAME: CHANGEME
#     DB_PASSWORD: CHANGEME

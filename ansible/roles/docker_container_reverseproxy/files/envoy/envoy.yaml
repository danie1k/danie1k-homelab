# TODO Add response headers:
#  X-Content-Type-Options nosniff;
#  X-XSS-Protection "1; mode=block";
#  X-Robots-Tag none;
#  X-Download-Options noopen;
#  X-Frame-Options "SAMEORIGIN";
#  X-Permitted-Cross-Domain-Policies none;
#  Referrer-Policy no-referrer;




###    DOCKER   >   https://github.com/gliderlabs/registrator   >   CONSUL   >   ENVOY         ???????????????/
###                 https://github.com/turbinelabs/rotor


---

static_resources:
  listeners:
    ##
    # HTTP -> HTTPS
    ##
    - name: HTTP_TO_HTTPS
      address: { socket_address: { address: 0.0.0.0, port_value: 80, protocol: TCP } }
      # listener_filters:
      #  - ??
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http_to_https
                http_filters: [{ name: envoy.filters.http.router }]
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: [ "*" ]
                      routes:
                        - match: { prefix: "/" }
                          redirect: { path_redirect: "/", https_redirect: true }
    ##
    # HTTPS
    ##
    - name: HTTPS
      address: { socket_address: { address: 0.0.0.0, port_value: 443 } }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_https
                http_filters: [{ name: envoy.filters.http.router }]
                upgrade_configs: [{ upgrade_type: websocket }] # Enable websocket support
                route_config:
                  name: local_route
                  virtual_hosts:
                    {% for container_name in _static_containers %}
                    ##
                    # {{ container_name | upper }}
                    ##
                    - name: {{ container_name }}
                      domains: [ "{{ container_name }}.{{ lab.domain_name }}" ]
                      routes:
                        - match: { prefix: "/" }
                          route: { cluster: "CLUSTER_{{ container_name | upper }}" }
                    {% endif %}

          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain: { filename: "/config/tls/fullchain1.pem" }
                    private_key: { filename: "/config/tls/privkey1.pem" }
                alpn_protocols: [ "h2,http/1.1" ]

  clusters:
    {% for container_name in _static_containers %}
    ##
    # {{ container_name | upper }}
    ##
    - name: "CLUSTER_{{ container_name | upper }}"
      connect_timeout: 300s
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: {{ container_name }}
        endpoints: [{ lb_endpoints: [{ endpoint: { address: { socket_address: { address: "{{ container_name }}.{{ docker.internal_network_name }}", port_value: "80" } } } }] }]
    {% endif %}


#    - name: docker_hello_http
#      address: { socket_address: { address: 0.0.0.0, port_value: 80 } }
#      filter_chains:
#        - filters:
#            - name: envoy.filters.network.http_connection_manager
#              typed_config:
#                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#                stat_prefix: ingress_http
#                http_filters: [{ name: envoy.filters.http.router }]
#                route_config:
#                  name: local_route
#                  virtual_hosts:
#                    - name: local_service
#                      domains: [ "*" ]
#                      routes:
#                        - match: { prefix: "/" }
#                          redirect: { path_redirect: "/", https_redirect: true }

#    ##
#    # NEXTCLOUD
#    ##
#    - name: docker_nextcloud_http
#      address: { socket_address: { address: 0.0.0.0, port_value: 80 } }
#      filter_chains:
#        - filters:
#            - name: envoy.filters.network.http_connection_manager
#              typed_config:
#                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#                stat_prefix: ingress_http
#                http_filters: [{ name: envoy.filters.http.router }]
#                route_config:
#                  name: local_route
#                  virtual_hosts:
#                    - name: local_service
#                      domains: [ "hello.allanite.it" ]
#                      routes:
#                        - match: { prefix: "/" }
#                          redirect: { path_redirect: "/", https_redirect: true }
#    - name: docker_hello_https
#      address: { socket_address: { address: 0.0.0.0, port_value: 443 } }
#      filter_chains:
#        - filters:
#            - name: envoy.filters.network.http_connection_manager
#              typed_config:
#                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
#                stat_prefix: ingress_http
#                http_filters: [{ name: envoy.filters.http.router }]
#                route_config:
#                  name: local_route
#                  virtual_hosts:
#                    - name: local_service
#                      domains: [ "hello.allanite.it" ]
#                      routes:
#                        - match: { prefix: "/" }
#                          route: { cluster: hello }
#          transport_socket:
#            name: envoy.transport_sockets.tls
#            typed_config:
#              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
#              common_tls_context:
#                tls_certificates:
#                  - certificate_chain: { filename: "/config/tls/fullchain1.pem" }
#                    private_key: { filename: "/config/tls/privkey1.pem" }
#                  alpn_protocols: [ "h2,http/1.1" ]
#
#    - name: docker_postgres
#      address: { socket_address: { address: 0.0.0.0, port_value: 5432 } }
#      filter_chains:
#        - filters:
#            - name: envoy.filters.network.tcp_proxy
#              typed_config:
#                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
#                stat_prefix: postgres
#                cluster: postgres
#
#  clusters:
#    - name: hello
#      connect_timeout: 1s
#      type: STRICT_DNS
#      dns_lookup_family: V4_ONLY
#      load_assignment:
#        cluster_name: hello
#        endpoints: [{ lb_endpoints: [{ endpoint: { address: { socket_address: { address: hello.internal, port_value: 5432 } } } }] }]
#
#    - name: postgres
#      connect_timeout: 1s
#      type: STRICT_DNS
#      dns_lookup_family: V4_ONLY
#      load_assignment:
#        cluster_name: postgres
#        endpoints: [{ lb_endpoints: [{ endpoint: { address: { socket_address: { address: postgres.internal, port_value: 5432 } } } }] }]

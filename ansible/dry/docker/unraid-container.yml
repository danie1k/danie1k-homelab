---

# Task arguments/params:
#   name
#   image
#   (optional) command
#   (optional) entrypoint
#   (optional) env
#   (optional) exposed_ports
#   (optional) extra
#   (optional) files
#   (optional) icon
#   (optional) labels
#   (optional) networks
#   (optional) proxy
#   (optional) service_data_dir
#   (optional) templates
#   (optional) user
#   (optional) volumes


- name: "dry/unraid-container : {{ name }} : Assert 'name'"
  assert:
    that: [ 'name | default("", true) | length > 0' ]
    fail_msg: "Missing or empty 'name'"

- name: "dry/unraid-container : {{ name }} : Assert 'image'"
  assert:
    that: [ 'image | default("", true) | length > 0' ]
    fail_msg: "Missing or empty 'image'"

- name: 'dry/unraid-container : {{ name }} : Set defaults'
  set_fact:
    __default_labels: '{{ docker_config.container_defaults.labels | default({}, true) }}'
    __default_networks:
      - name: '{{ docker_config.network.internal.name }}'
    __container_facts: >-2
      {
        "name": "{{ name }}",
        "image": "{{ image }}",
        "icon": (
          "https://raw.githubusercontent.com/danie1k/danie1k-homelab/master/icons/{{ icon | default(name, true) }}.png"
        ),
        "log_driver": "{{ log_driver | default("loki", true) }}",
        "networks": {},
        "exposed_ports": "{{ exposed_ports | default([], true) }}",
        "container_group": "{{ (user | default(docker_config.default_user, true)).split(':')[1] }}",
        "container_owner": "{{ (user | default(docker_config.default_user, true)).split(':')[0] }}",
        "container_labels": {},
        "default_user": "{{ user | default(docker_config.default_user, true) }}",
        "service_data_dir": "{{ service_data_dir | default(name, true) }}",
        "volume_base": "{{ unraid.services_data_dir }}/{{ service_data_dir | default(name, true) }}",
        "webui": (
          "{% if webui|default(1)|bool is not sameas false %}"
          "{{ webui | default('https://' ~ name ~ '.' ~ lab_domain_name ~ '/') }}"
          "{% endif %}"
        ),
      }

# ENVIRONMENT VARIABLES

- name: 'dry/unraid-container : {{ name }} : Init environment variables'
  set_fact:
    __container_facts: >-2
      {{
        __container_facts
        | combine({"environment": (env | default({}, true)) | combine({
          "PUID": __container_facts.container_owner,
          "USER_ID": __container_facts.container_owner,
          "PGID": __container_facts.container_group,
          "GROUP_ID": __container_facts.container_group,
          "UMASK": "000",
          "TZ": docker_config.container_timezone | default("UTC", true)
        }) })
      }}

# LABELS

- name: 'dry/unraid-container : {{ name }} : Init labels'
  set_fact:  # noqa 502
    __container_facts: >-2
      {{
        __container_facts
        | combine({"container_labels": (labels | default({}, true)) | combine(__default_labels)})
      }}


# NETWORKS

- name: 'dry/unraid-container : {{ name }} : Init networks'
  set_fact:
    __container_facts: >-2
      {{
        __container_facts
        | combine({"networks": networks | default(__default_networks, true)})
      }}

# TRAEFIK LABLES

- block:
    - name: 'dry/unraid-container : {{ name }} : Traefik Docker Network label'
      set_fact:
        # https://github.com/traefik/traefik/issues/1254#issuecomment-299114960
        __container_facts: >-2
          {{
            __container_facts
            | combine({
              "container_labels": (
                __container_facts.container_labels
                | combine({"traefik.docker.network": docker_config.network.internal.name})
              )
            })
          }}

    # HTTP
    - name: 'dry/unraid-container : {{ name }} : Generate Traefik HTTP router labels'
      set_fact:
        _traefik_labels: >-2
          {
            "traefik.http.routers.{{ name }}-http-{{ _index }}.rule": "Host(`{{ name }}.{{ lab_domain_name }}`)",
            "traefik.http.routers.{{ name }}-http-{{ _index }}.service": (
              "{% if 'service' in http_item and http_item.service is not mapping %}"
                "{{ http_item.service }}"
              "{% else %}"
                "{{ name }}-http-{{ _index }}@docker"
              "{% endif %}"
            ),
            (
              "traefik.http.services."
              "{% if 'service' in http_item and http_item.service is not mapping %}"
                "{{ http_item.service }}"
              "{% else %}"
                "{{ name }}-http-{{ _index }}"
              "{% endif %}.loadbalancer.server.port"
            ): "{{ http_item.http_port }}",
            {% if http_item.router is defined %}
              {% for _key, _value in http_item.router.items() %}
                "traefik.http.routers.{{ name }}-http-{{ _index }}.{{ _key }}": "{{ _value }}",
              {% endfor %}
            {% endif %}
            {% if http_item.service is mapping %}
              {% for _key, _value in http_item.service.items() %}
                "traefik.http.services.{{ name }}-http-{{ _index }}.{{ _key }}": "{{ _value }}",
              {% endfor %}
            {% endif %}
          }
      with_items: "{{ proxy | community.general.json_query(\"[?http_port]\") }}"
      loop_control:
        index_var: _index
        loop_var: http_item
      register: _traefik_http
    - name: 'dry/unraid-container : {{ name }} : Add Traefik HTTP labels to container facts'
      set_fact:
        __container_facts: >-2
          {{
            __container_facts
            | combine({
              "container_labels": (
                __container_facts.container_labels
                | combine(_traefik_http.results | map(attribute="ansible_facts") | map(attribute="_traefik_labels"))
              )
            })
          }}

    # TCP
    - name: 'dry/unraid-container : {{ name }} : Generate Traefik TCP router labels'
      set_fact:
        _traefik_labels: >-2
          {
            "traefik.tcp.routers.{{ name }}-tcp-{{ _index }}.entrypoints": "{{ tcp_item.tcp_entrypoint }}",
            "traefik.tcp.routers.{{ name }}-tcp-{{ _index }}.rule": "HostSNI(`*`)",
            "traefik.tcp.routers.{{ name }}-tcp-{{ _index }}.service": (
              "{% if 'service' in tcp_item and tcp_item.service is not mapping %}"
                "{{ tcp_item.service }}"
              "{% else %}"
                "{{ name }}-tcp-{{ _index }}@docker"
              "{% endif %}"
            ),
            (
              "traefik.tcp.services."
              "{% if 'service' in tcp_item and tcp_item.service is not mapping %}"
                "{{ tcp_item.service }}"
              "{% else %}"
                "{{ name }}-tcp-{{ _index }}"
              "{% endif %}.loadbalancer.server.port"
            ): "{{ tcp_item.tcp_port }}",
            {% if tcp_item.router is defined %}
              {% for _key, _value in tcp_item.router.items() %}
                "traefik.http.routers.{{ name }}-tcp-{{ _index }}.{{ _key }}": "{{ _value }}",
              {% endfor %}
            {% endif %}
            {% if tcp_item.service is mapping %}
              {% for _key, _value in tcp_item.service.items() %}
                "traefik.http.services.{{ name }}-tcp-{{ _index }}.{{ _key }}": "{{ _value }}",
              {% endfor %}
            {% endif %}
          }
      with_items: "{{ proxy | community.general.json_query(\"[?tcp_port]\") }}"
      loop_control:
        index_var: _index
        loop_var: tcp_item
      register: _traefik_http
    - name: 'dry/unraid-container : {{ name }} : Add Traefik TCP labels to container facts'
      set_fact:
        __container_facts: >-2
          {{
            __container_facts
            | combine({
              "container_labels": (
                __container_facts.container_labels
                | combine(_traefik_http.results | map(attribute="ansible_facts") | map(attribute="_traefik_labels"))
              )
            })
          }}

  when: proxy | default(false, true)

# LOG DRIVER

- name: 'dry/unraid-container : {{ name }} : Init log driver choices'
  set_fact:
    __log_driver_config:
      syslog:
        syslog-address: '{{ services.syslog.address }}'
        tag: '{{ name }}.docker'
      loki:
        loki-url: '{{ services.loki.url }}'
        loki-batch-size: '128'
        loki-external-labels: 'job=docker,container={{ name }},network={{ __container_facts.networks[0].name }}'
        # no-file: true
        max-size: '1m'
        max-file: '1'

# VOLUMES

- name: 'dry/unraid-container : {{ name }} : Init volumes'
  set_fact:
    volume: >-
      {% if item is string %}{{ item }}{% else %}{{ __container_facts.volume_base }}{{ item | join(":") }}{% endif %}
  with_list: "{{ volumes | default([], true) }}"
  register: _volumes

- name: 'dry/unraid-container : {{ name }} : Add volumes to container facts'
  set_fact:
    __container_facts: >-2
      {{
        __container_facts
        | combine({"container_volumes": (_volumes.results | map(attribute="ansible_facts") | map(attribute="volume"))})
        | combine({"any_volumes_to_create": (
            (volumes | default([], true) | length > 0)
            or (files | default([], true) | length > 0)
            or (templates | default([], true) | length > 0)
        )})
      }}

# FINAL CONTAINER PARAMS

- name: 'dry/unraid-container : {{ name }} : Finalize container params'
  set_fact:
    __container_params:
      image: '{{ __container_facts.image }}'
      container_default_behavior: no_defaults

      # Naming
      name: '{{ __container_facts.name }}'
      hostname: '{{ __container_facts.name }}'
      labels: '{{ __container_facts.container_labels }}'

      # Logging
      log_driver: '{{ __container_facts.log_driver }}'
      log_options: '{{ __log_driver_config[__container_facts.log_driver] | default({}, true) }}'

      # Networking
      exposed_ports: '{{ __container_facts.exposed_ports }}'
      network_mode: '{{ __container_facts.networks[0].name }}'
      networks: '{{ __container_facts.networks }}'
      networks_cli_compatible: true
      purge_networks: true

      # Runtime Environment
      detach: true
      env: '{{ __container_facts.environment }}'

      restart_policy: unless-stopped
      volumes: '{{ __container_facts.container_volumes }}'

- name: "dry/unraid-container : {{ name }} : Container's 'extra' params"
  set_fact:
    __container_params: >-2
      {{
        (docker_config.container_defaults | default({}, true))
        | combine(__container_params)
        | combine(extra | default({}, true))
      }}

- name: "dry/unraid-container : {{ name }} : Container's command"
  set_fact:
    __container_params: '{{ __container_params | combine({"command": command}) }}'
  when: command | default(false, true)

- name: "dry/unraid-container : {{ name }} : Container's entrypoint"
  set_fact:  # noqa 502
    __container_params: '{{ __container_params | combine({"entrypoint": entrypoint}) }}'
  when: entrypoint | default(false, true)

# CREATE DIRECTORIES & FILES

- name: 'dry/unraid-container : {{ name }} : Create Container Volume persistent directory'
  file:
    path: '{{ __container_facts.volume_base }}'
    mode: '0774'
    owner: '{{ __container_facts.container_owner }}'
    group: '{{ __container_facts.container_group }}'
    state: directory
  when: __container_facts.any_volumes_to_create
- name: 'dry/unraid-container : {{ name }} : Copy files to Container Volume'
  ansible.builtin.copy:
    src: '{{ file_item.src }}'
    dest: '{{ __container_facts.volume_base }}/{{ file_item.dest }}'
    owner: '{{ __container_facts.container_owner }}'
    group: '{{ __container_facts.container_group }}'
    mode: '{{ file_item.mode | default("preserve") }}'
    force: '{{ file_item.force | default(false) }}'
  with_list: '{{ files | default([], true) }}'
  loop_control:
    loop_var: file_item
  when: __container_facts.any_volumes_to_create
- name: 'dry/unraid-container : {{ name }} : Copy templates to Container Volume'
  ansible.builtin.template:
    src: '{{ template_item.src }}'
    dest: '{{ __container_facts.volume_base }}/{{ template_item.dest }}'
    owner: '{{ __container_facts.container_owner }}'
    group: '{{ __container_facts.container_group }}'
    mode: '{{ template_item.mode | default("preserve") }}'
    force: '{{ template_item.force | default(false) }}'
  with_list: '{{ templates | default([], true) }}'
  loop_control:
    loop_var: template_item
  when: __container_facts.any_volumes_to_create

# INTEGRATION WITH UNRAID DYNAMIX PLUGIN

- name: 'dry/unraid-container : {{ name }} : Create Dynamix Plugin container template'
  ansible.builtin.copy:
    content: |2
      <?xml version="1.0"?>
      <Container version="2">
        <Icon>{{ __container_facts.icon }}</Icon>
        <Name>{{ __container_facts.name }}</Name>
        <Repository>{{ __container_facts.image }}</Repository>
        {% if __container_facts.webui %}<WebUI>{{ __container_facts.webui }}</WebUI>{% endif %}
      </Container>
    dest: '/boot/config/plugins/dockerMan/templates-user/{{ name }}.xml'

# PULL IMAGE

- name: 'dry/unraid-container : {{ name }} : Pull Docker Image'
  community.docker.docker_image:
    name: '{{ __container_facts.image }}'
    source: pull
    state: present

# RUN CONTAINER

- name: 'dry/unraid-container : {{ name }} : Spin up the Container'
  community.docker.docker_container: '{{ __container_params }}'

# UNSET FACTS

- name: "dry/unraid-container : {{ name }} : Unset task's facts"
  set_fact:
    _volumes:
    command:
    entrypoint:
    env:
    exposed_ports:
    extra:
    files:
    icon:
    image:
    labels:
    name:
    networks:
    proxy:
    service_data_dir:
    templates:
    user:
    volumes:
